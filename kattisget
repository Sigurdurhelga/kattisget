#!/usr/bin/python3
import requests
import urllib.request
import time
from bs4 import BeautifulSoup
import sys
import os
import argparse
from config import config

parser = argparse.ArgumentParser()

parser.add_argument(
    "problemid",
    help="The problem id on kattis.com, can be a portion of the problem id, just enough to be unique")
parser.add_argument("-l", "--language",
                    help="The language you wish to use, default=cpp",
                    default="cpp",
                    choices=["cpp", "py", "py2"])

parser.add_argument(
    "--hint", help="Attempt to retrieve hints from cpbook.net", required=False)

args = parser.parse_args()

cppInit = """#include <bits/stdc++.h>
using namespace std;

int main(){

  return 0;
}
"""

pythonTemplate = '''
print('IMPLEMENT ME')
'''

# this is temporary until we decided to add more language support
usePy = args.language != "cpp"


def get_hints(id):
    url = 'https://cpbook.net/methodstosolve'
    response = requests.get(url, verify=False)
    soup = BeautifulSoup(response.text, "html.parser")
    pres = [s.find_all('tr') for s in soup.find_all(
        'table', id='problemtable')][0][1:]
    for x in pres:
        title = x.find_all('td')[0].get_text()
        hint = x.find_all('td')[3].get_text()

        if title == id:
            return hint

    return 'no hint found'


def setup_testcases(resp, problemid, problemfile):
    soup = BeautifulSoup(resp.text, "html.parser")
    pres = [s.find_all('pre') for s in soup.find_all('table', class_='sample')]
    tcs = []
    for x in pres:
        tcs.extend(x)
    tcs = [s.text.replace('<pre>', '') for s in tcs]
    tcs = [s.replace('</pre>', '') for s in tcs]

    tccount = 1

    for k in range(0, len(tcs), 2):
        with open(problemDir+'/in'+str(tccount)+".txt", 'w') as f:
            f.write(tcs[k])
        with open(problemDir+'/out'+str(tccount)+".txt", 'w') as f:
            f.write(tcs[k+1])
        tccount += 1

    tccount = 1

    if not usePy:
        makeInit = "compile:\n\tg++ -std=c++17 -Wall -static -O2 {0} -o run.out\ntest:\n\tg++ -std=c++17 -Wall -static -O2 {0} -o run.out".format(
            problemId+".cpp")
        for k in range(0, len(tcs), 2):
            makeInit += "\n\t./run.out < in{}.txt > temp".format(tccount)
            makeInit += "\n\tdiff -y out{}.txt temp".format(tccount)
            tccount += 1

    else:
        makeInit = "test:\n"
        for k in range(0, len(tcs), 2):
            makeInit += "\n\tpython {}.py  < in{}.txt > temp".format(
                problemId, tccount)
            makeInit += "\n\tdiff -y out{}.txt temp".format(tccount)
            tccount += 1
    if(config["enable-hattis"]):
        makeInit += "\nsubmit:"
        makeInit += "\n\thattis {} {} --conf {}".format(problemid, problemfile, config["kattisrclocation"])

    with open(problemDir+'/makefile', 'w') as f:
        f.write(makeInit)


if __name__ == '__main__':
    url = 'https://open.kattis.com/search?q='+args.problemid
    response = requests.get(url)
    if "search" in response.url:
        print("please write the exact problem id")
        sys.exit()

    problemId = response.url.split('/')[-1]
    problemDir = './'+problemId
    problemFile = problemId + (".cpp" if not usePy else ".py")

    problemPath = problemDir+"/"+ problemFile

    if not os.path.exists(problemDir):
        os.mkdir(problemDir)
    if not os.path.exists(problemPath):
        with open(problemPath, 'w') as f:
            if usePy:
                f.write(pythonTemplate)
            else:
                f.write(cppInit)

    setup_testcases(response, problemId, problemFile)

    if args.hint:
        print('Done creating directory, fetching hint')
        print(get_hints('\033[95m'+sys.argv[1])+'\033[0m')
